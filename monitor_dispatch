#!/usr/bin/env python3
import sys
import os
import json
import shlex
import importlib
from pathlib import Path
from monitorlib import _funclib

PASSBACK_PREFIX=r"\xDE\xAD\xBE\xEF "

local_cmdfile = os.environ.get('LOCAL_CMDS')
if local_cmdfile:
    assert(local_cmdfile.endswith('.py'))
    sys.path.insert(0, str(Path(local_cmdfile).expanduser().resolve().parent))
    local_commands = importlib.import_module(Path(local_cmdfile).name[:-3])
else:
    from local_commands import *

VAR_TMPFILE='/tmp/${USER}_pbvar'
TOT_TMPFILE='/tmp/${USER}_pb'


def aliases(funclib = _funclib):
    aliases = []
    for funcname, props in funclib.items():
        commands = []
        commands.append(f'rm -f {TOT_TMPFILE}')
        commands.append(f'echo -n "{funcname}," > {TOT_TMPFILE}')
        for k, v in props['kwargs'].items():
            commands.append(f'cat > {VAR_TMPFILE} <<< {v}')
            commands.append(f'echo -n "{k},$(wc -c < {VAR_TMPFILE}| awk \'{{$1=$1}};1\')," >> {TOT_TMPFILE}')
            commands.append(f'cat {VAR_TMPFILE} >> {TOT_TMPFILE}')
        commands.append(r"printf '"+PASSBACK_PREFIX+f"%d ' $(wc -c < {TOT_TMPFILE}) && cat {TOT_TMPFILE}")
        alias = '; '.join(commands)
        aliases.append(f'function {funcname}() {{ {alias}; }}')
    return '\n'.join(aliases)

def call(funcname, kwargs, funclib = _funclib):
    funclib[funcname]['fn'](**kwargs)


def run():

    contents = sys.stdin.read()
    fn, contents = contents.split(',',1)
    kwargs = {}
    while contents:
        key, size, contents = contents.split(',',2)
        value = contents[:int(size)]
        kwargs[key] = value
        contents = contents[int(size)+1:]

    call(fn, kwargs)

def main():
    if len(sys.argv) > 2 or (len(sys.argv) == 2 and sys.argv[1] != '--aliases'):
        print(f"Usage: {sys.argv[0]} [--aliases]")
        exit(1)
    if len(sys.argv) == 2:
        print(aliases())
    else:
        run()

if __name__ == "__main__":
    main()
